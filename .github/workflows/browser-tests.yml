on:
    workflow_call:
        inputs:
            project-edition:
                description: "Project edition to set up: oss, content, experience, commerce"
                required: true
                type: string
            project-version:
                description: "Project version to set up: ^3.3.x-dev, ^4.0.x-dev etc."
                required: true
                type: string
            test-suite:
                description: "Browser tests to run"
                required: true
                type: string
            setup:
                default: "doc/docker/base-dev.yml:doc/docker/selenium.yml"
                description: "Docker Compose files to use"
                required: false
                type: string
            test-setup-phase-1:
                description: "Setup for browser tests - phase 1"
                default: ""
                required: false
                type: string
            test-setup-phase-2:
                description: "Setup for browser tests - phase 2"
                default: ""
                required: false
                type: string
            multirepository:
                default: false
                description: "Whether the job is running on a multirepository setup"
                required: false
                type: boolean
            php-image:
                default: "ezsystems/php:7.4-v2-node16"
                description: "The PHP image to use"
                required: false
                type: string
            ci-scripts-branch:
                default: "main"
                description: "The branch from ibexa/ci-scripts repository that should be used"
                required: false
                type: string
            use-compatibility-layer:
                default: false
                type: boolean
                required: false
                description: "Use the compatibility layer when running tests"
            timeout:
                default: 30
                description: "Job maximum timeout in minutes"
                required: false
                type: number
        secrets:
            SLACK_WEBHOOK_URL:
                required: true
            SATIS_NETWORK_KEY:
                required: false
            SATIS_NETWORK_TOKEN:
                required: false
            TRAVIS_GITHUB_TOKEN:
                required: false

env:
    APP_ENV: behat
    APP_DEBUG: 1
    PHP_INI_ENV_memory_limit: 512M
    COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
    browser-tests:
        runs-on: ubuntu-latest
        timeout-minutes: ${{ inputs.timeout }}
        outputs:
            report-url: ${{ steps.report.outputs.report-url }}
        steps:
            - if: contains(inputs.setup, 'doc/docker/varnish.yml')
              name: "[Varnish] Set the URL the tests should access"
              run: echo "WEB_HOST=http://varnish" >> $GITHUB_ENV

            - uses: actions/checkout@v2

            - name: Setup PHP Action
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 7.4
                  coverage: none

            - name: Cache dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ env.COMPOSER_CACHE_DIR }}
                  key: ${{ inputs.project-edition }}-${{ inputs.project-version }}-${{ inputs.php-image }}-${{ github.sha }}
                  restore-keys: |
                    ${{ inputs.project-edition }}-${{ inputs.project-version }}-${{ inputs.php-image }}

            - if: env.SATIS_NETWORK_KEY != ''
              name: Add composer keys for private packagist
              run: |
                  composer config http-basic.updates.ibexa.co $SATIS_NETWORK_KEY $SATIS_NETWORK_TOKEN
                  composer config github-oauth.github.com $TRAVIS_GITHUB_TOKEN
              env:
                  SATIS_NETWORK_KEY: ${{ secrets.SATIS_NETWORK_KEY }}
                  SATIS_NETWORK_TOKEN: ${{ secrets.SATIS_NETWORK_TOKEN }}
                  TRAVIS_GITHUB_TOKEN: ${{ secrets.TRAVIS_GITHUB_TOKEN }}

            - name: Set up whole project using the tested dependency
              run: |
                curl -L "https://raw.githubusercontent.com/ibexa/ci-scripts/${{ inputs.ci-scripts-branch }}/bin/${{ inputs.project-version }}/prepare_project_edition.sh" > prepare_project_edition.sh
                chmod +x prepare_project_edition.sh
                ./prepare_project_edition.sh ${{ inputs.project-edition }} ${{ inputs.project-version }} ${{ inputs.setup }} ${{ inputs.php-image }}

            - if: inputs.use-compatibility-layer
              name: Set up compatibility-layer
              run: |
                cd ${HOME}/build/project
                docker-compose --env-file=.env exec -T --user www-data app sh -c "composer require ibexa/compatibility-layer:^4.0.x-dev --no-scripts --no-plugins"
                docker-compose --env-file=.env exec -T --user www-data app sh -c "composer recipes:install ibexa/compatibility-layer --force"
                docker-compose --env-file=.env exec -T --user www-data app sh -c "composer run post-install-cmd"

            - if: inputs.multirepository
              name: Set up multirepository build
              run: |
                cd ${HOME}/build/project
                # Drop database used by default connection
                docker-compose exec -T --user www-data app sh -c "php bin/console doctrine:database:drop --connection=default --force"
                # Clear SPI cache
                docker-compose exec -T --user www-data app sh -c 'php bin/console cache:pool:clear ${CACHE_POOL:-cache.tagaware.filesystem}'
                # Run setup
                docker-compose exec -T --user www-data app sh -c "vendor/bin/ezbehat --mode=standard --profile=setup --suite=multirepository -c=behat_ibexa_oss.yaml"
                docker-compose exec -T --user www-data app sh -c "composer run post-install-cmd"
                # Reinstal database using the new repository
                docker-compose exec -T --user www-data app sh -c "php bin/console ibexa:install"

            - if: inputs.test-setup-phase-1 != ''
              name: Run first phase of tests setup
              run: |
                  cd ${HOME}/build/project
                  docker-compose --env-file=.env exec -T --user www-data app sh -c "vendor/bin/ibexabehat ${{ inputs.test-setup-phase-1 }}"

            - if: inputs.test-setup-phase-2 != ''
              name: Run second phase of tests setup
              run: |
                  cd ${HOME}/build/project
                  docker-compose --env-file=.env exec -T --user www-data app sh -c "composer run post-install-cmd"
                  docker-compose --env-file=.env exec -T --user www-data app sh -c "vendor/bin/ibexabehat ${{ inputs.test-setup-phase-2 }}"

            - name: Run tests
              run: |
                  cd ${HOME}/build/project
                  docker-compose --env-file=.env exec -T --user www-data app sh -c "vendor/bin/ibexabehat ${{ inputs.test-suite }}"

            - if: always()
              id: report
              name: Upload tests report
              continue-on-error: true
              run: |
                  cd ${HOME}/build/project
                  echo "::set-output name=report-url::failure occured when uploading the report"
                  REPORT_URL=$(vendor/bin/ibexareport)
                  echo "See the report at $REPORT_URL"
                  echo "::set-output name=report-url::$REPORT_URL"

    report-results:
        runs-on: ubuntu-latest
        name: "Send Slack notification"
        timeout-minutes: 3
        if: always() && github.event_name != 'pull_request'
        needs: browser-tests
        env:
            REPORT_URL: ${{needs.browser-tests.outputs.report-url}}
        steps:
            - name: Create Slack failure message
              run: >
                 echo "SLACK_PAYLOAD=
                 {\"blocks\": [{\"type\": \"section\",\"text\": {\"type\": \"mrkdwn\",\"text\": \"
                 :x: Browser tests for $GITHUB_REPOSITORY repository have failed.\n
                 Commiter: $GITHUB_ACTOR \n
                 Branch: $GITHUB_REF_NAME \n
                 Details: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID \n
                 Report: $REPORT_URL
                 \"}}]}" >> $GITHUB_ENV

            - if: ${{ needs.browser-tests.result == 'success' }}
              name: Create Slack success message
              run: >
                 echo "SLACK_PAYLOAD=
                 {\"blocks\": [{\"type\": \"section\",\"text\": {\"type\": \"mrkdwn\",\"text\": \"
                 :white_check_mark: Browser tests for $GITHUB_REPOSITORY repository have passed.\n
                 Commiter: $GITHUB_ACTOR \n
                 Branch: $GITHUB_REF_NAME \n
                 Details: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID \n
                 Report: $REPORT_URL
                 \"}}]}" >> $GITHUB_ENV

            - name: Send notification about workflow result
              uses: slackapi/slack-github-action@v1.16.0
              with:
                  payload: ${{ env.SLACK_PAYLOAD }}
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
