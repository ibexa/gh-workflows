on:
    workflow_call:
        inputs:
            project-edition:
                description: "Project edition to set up: oss, content, experience, commerce"
                required: true
                type: string
            test-suite:
                description: "Browser tests to run"
                required: true
                type: string
            project-version:
                description: "Project version to set up: ^3.3.x-dev, 4.1.x-dev, 4.2.x-dev, v3.3.0, v4.2.0. If not present will be inferred from package's branch-alias"
                required: false
                type: string
            setup:
                default: "doc/docker/base-dev.yml:doc/docker/selenium.yml"
                description: "Docker Compose files to use"
                required: false
                type: string
            test-setup-phase-1:
                description: "Setup for browser tests - phase 1"
                default: ""
                required: false
                type: string
            test-setup-phase-2:
                description: "Setup for browser tests - phase 2"
                default: ""
                required: false
                type: string
            multirepository:
                default: false
                description: "Whether the job is running on a multirepository setup"
                required: false
                type: boolean
            php-image:
                default: "ghcr.io/ibexa/docker/php:8.3-node22"
                description: "The PHP image to use"
                required: false
                type: string
            ci-scripts-branch:
                default: "main"
                description: "The branch from ibexa/ci-scripts repository that should be used"
                required: false
                type: string
            use-compatibility-layer:
                default: false
                type: boolean
                required: false
                description: "Use the compatibility layer when running tests"
            job-count:
                default: 1
                required: false
                type: number
                description: "Number of jobs that will run the tests in parallel"
            send-success-notification:
                default: true
                required: false
                type: boolean
                description: "Send a notification when the tests pass"
            timeout:
                default: 60
                description: "Job maximum timeout in minutes"
                required: false
                type: number
        secrets:
            SLACK_WEBHOOK_URL:
                required: true
            SATIS_NETWORK_KEY:
                required: false
            SATIS_NETWORK_TOKEN:
                required: false
            AUTOMATION_CLIENT_ID:
                required: false
            AUTOMATION_CLIENT_INSTALLATION:
                required: false
            AUTOMATION_CLIENT_SECRET:
                required: false
            PERCY_TOKEN:
                required: false
            CLOUDINARY_URL:
                required: false
            LAMBDATEST_PROJECT_TOKEN:
                required: false
            LAMBDATEST_USERNAME:
                required: false
            LAMBDATEST_ACCESS_KEY:
                required: false

env:
    APP_ENV: behat
    APP_DEBUG: 1
    APP_SECRET: '2d4218d7b6c69a9f88da7b8986e64717b3c40948a7ba2b1ca309dc292472286d'
    PHP_INI_ENV_memory_limit: 512M
    COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
    setup-jobs:
        runs-on: ubuntu-latest
        timeout-minutes: 1
        outputs:
          matrix: ${{ steps.generate-matrix.outputs.matrix }}
          job-count: ${{ steps.generate-matrix.outputs.job-count }}
        steps:
            - name: Set job count for builds
              run: echo "job_count=${{ inputs.job-count }}" >> $GITHUB_ENV
            - name: (v4) Limit job-count to max 3 for PRs
              if: github.event_name == 'pull_request'
              run: |
                if [[ "$job_count" -gt 3 ]] ; then
                  job_count=3
                fi
                echo "job_count=$job_count" >> $GITHUB_ENV
              env:
                job_count: ${{ env.job_count }}
            - name: (v3) Limit job-count to 1 for PRs
              if: github.event_name == 'pull_request' && inputs.project-version == '^3.3.x-dev'
              run: echo "job_count=1" >> $GITHUB_ENV
            - name: Generate matrix
              id: generate-matrix
              run: |
                matrix=$(php -r 'echo json_encode(["offset" => range(0, ${{ env.job_count }} - 1)]);')
                echo "matrix=$matrix" >> $GITHUB_OUTPUT
                echo "job-count=$job_count" >> $GITHUB_OUTPUT
            - if: always() && github.event_name != 'pull_request'
              name: Create Slack message variables
              run: |
                echo "RESULT_EMOJI=❌" >> $GITHUB_ENV
            - if: always() && github.event_name != 'pull_request'
              name: Create Slack message
              run: >
                echo "SLACK_PAYLOAD=
                {\"blocks\": [{\"type\": \"section\",\"text\": {\"type\": \"mrkdwn\",\"text\": \"
                $RESULT_EMOJI *$GITHUB_REPOSITORY*:*$GITHUB_REF_NAME* ($GITHUB_ACTOR) |
                <$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Details>
                \"}}]}" >> $GITHUB_ENV
            - if: always() && github.event_name != 'pull_request' && job.status != 'success' && job.status != 'skipped'
              name: Send notification about workflow result
              uses: slackapi/slack-github-action@v1.23.0
              with:
                payload: ${{ env.SLACK_PAYLOAD }}
              env:
                SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    browser-tests:
        needs: setup-jobs
        runs-on: ubuntu-latest
        timeout-minutes: ${{ inputs.timeout }}
        strategy:
          fail-fast: false
          matrix: ${{ fromJson(needs.setup-jobs.outputs.matrix) }}
        steps:
            - if: contains(inputs.setup, 'varnish')
              name: "[Varnish] Set the URL the tests should access"
              run: echo "WEB_HOST=http://varnish" >> $GITHUB_ENV

            - uses: actions/checkout@v4

            - name: Set up project version
              id: project-version
              run: |
                if [[ "$version" == "" ]] ; then
                    echo "Input project version not set, taking the value from composer.json"
                    version=$(cat composer.json | jq -r '.extra | ."branch-alias" | .[]')
                fi
                if [[ "$version" == "3.3.x-dev" ]] ; then
                    version="^3.3.x-dev"
                fi
                echo "version=$version" >> $GITHUB_OUTPUT
              env:
                version: ${{ inputs.project-version }}

            - name: Setup PHP Action
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.3
                  coverage: none

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: ${{ env.COMPOSER_CACHE_DIR }}
                  key: ${{ inputs.project-edition }}-${{ steps.project-version.outputs.version }}-${{ inputs.php-image }}-${{ github.sha }}
                  restore-keys: |
                    ${{ inputs.project-edition }}-${{ steps.project-version.outputs.version }}-${{ inputs.php-image }}

            - if: env.AUTOMATION_CLIENT_SECRET != ''
              name: Generate token
              id: generate_token
              uses: actions/create-github-app-token@v2
              with:
                app-id: ${{ secrets.AUTOMATION_CLIENT_ID }}
                private-key: ${{ secrets.AUTOMATION_CLIENT_SECRET }}
                owner: ${{ github.repository_owner }}

            - if: env.SATIS_NETWORK_KEY != ''
              name: Add composer keys for private packagist
              run: |
                  composer config http-basic.updates.ibexa.co $SATIS_NETWORK_KEY $SATIS_NETWORK_TOKEN
              env:
                  SATIS_NETWORK_KEY: ${{ secrets.SATIS_NETWORK_KEY }}
                  SATIS_NETWORK_TOKEN: ${{ secrets.SATIS_NETWORK_TOKEN }}

            - if: steps.generate_token.outputs.token != ''
              name: Add composer key for GitHub App
              run: |
                  composer config github-oauth.github.com $GITHUB_TOKEN
              env:
                  GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

            - if: startsWith(steps.project-version.outputs.version, 'v') == false
              name: Set up whole project using the tested dependency (dev version)
              run: |
                curl -L "https://raw.githubusercontent.com/ibexa/ci-scripts/${{ inputs.ci-scripts-branch }}/bin/${{ steps.project-version.outputs.version }}/prepare_project_edition.sh" > prepare_project_edition.sh
                chmod +x prepare_project_edition.sh
                ./prepare_project_edition.sh ${{ inputs.project-edition }} ${{ steps.project-version.outputs.version }} ${{ inputs.setup }} ${{ inputs.php-image }}
              env:
                PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
                CLOUDINARY_URL: "${{ secrets.CLOUDINARY_URL }}"
                LAMBDATEST_PROJECT_TOKEN: ${{ secrets.LAMBDATEST_PROJECT_TOKEN }}
                LAMBDATEST_USERNAME: "${{ secrets.LAMBDATEST_USERNAME }}"
                LAMBDATEST_ACCESS_KEY: "${{ secrets.LAMBDATEST_ACCESS_KEY }}"

            - if: startsWith(steps.project-version.outputs.version, 'v')
              name: Set up whole project using a stable release
              run: |
                curl -L "https://raw.githubusercontent.com/ibexa/ci-scripts/${{ inputs.ci-scripts-branch }}/bin/stable/prepare_project_edition.sh" > prepare_project_edition.sh
                chmod +x prepare_project_edition.sh
                ./prepare_project_edition.sh ${{ inputs.project-edition }} ${{ steps.project-version.outputs.version }} ${{ inputs.setup }} ${{ inputs.php-image }}
              env:
                PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
                CLOUDINARY_URL: "${{ secrets.CLOUDINARY_URL }}"
                LAMBDATEST_PROJECT_TOKEN: ${{ secrets.LAMBDATEST_PROJECT_TOKEN }}
                LAMBDATEST_USERNAME: "${{ secrets.LAMBDATEST_USERNAME }}"
                LAMBDATEST_ACCESS_KEY: "${{ secrets.LAMBDATEST_ACCESS_KEY }}"

            - if: inputs.use-compatibility-layer
              name: Set up compatibility-layer
              run: |
                cd ${HOME}/build/project
                docker compose --env-file=.env exec -T app sh -c "composer require ibexa/compatibility-layer:${{ steps.project-version.outputs.version }} --no-scripts --no-plugins"
                docker compose --env-file=.env exec -T app sh -c "composer recipes:install ibexa/compatibility-layer --force"
                docker compose --env-file=.env exec -T --user www-data app sh -c "composer run post-install-cmd"

            - if: inputs.multirepository && contains(inputs.setup, 'solr8.yml')
              name: Set up multirepository build with Solr
              run: |
                cd ${HOME}/build/project
                # Drop database used by default connection
                docker compose exec -T --user www-data app sh -c "php bin/console doctrine:database:drop --connection=default --force"
                # Clear SPI cache
                docker compose exec -T --user www-data app sh -c 'php bin/console cache:pool:clear ${CACHE_POOL:-cache.tagaware.filesystem}'
                # Run setup
                docker compose exec -T --user www-data app sh -c "vendor/bin/ibexabehat --mode=standard --profile=setup --suite=multirepository -c=behat_ibexa_oss.yaml --tags=~@elastic"
                if [[ "${{ steps.project-version.outputs.version }}" == *'5.0.x-dev'* ]]; then
                  docker compose exec -T --user www-data app sh -c "NODE_OPTIONS='--max-old-space-size=3072' composer run post-install-cmd"
                else
                  docker compose exec -T --user www-data app sh -c "composer run post-install-cmd"
                fi
                # Reinstall database using the new repository
                docker compose exec -T --user www-data app sh -c "php bin/console ibexa:install --no-interaction"

            - if: inputs.multirepository && contains(inputs.setup, 'elastic.yml')
              name: Set up multirepository build with Elastic
              run: |
                cd ${HOME}/build/project
                # Drop database used by default connection
                docker compose exec -T --user www-data app sh -c "php bin/console doctrine:database:drop --connection=default --force"
                # Clear SPI cache
                docker compose exec -T --user www-data app sh -c 'php bin/console cache:pool:clear ${CACHE_POOL:-cache.tagaware.filesystem}'
                # Run setup
                docker compose exec -T --user www-data app sh -c "vendor/bin/ibexabehat --mode=standard --profile=setup --suite=multirepository -c=behat_ibexa_oss.yaml --tags=~@solr"
                if [[ "${{ steps.project-version.outputs.version }}" == *'5.0.x-dev'* ]]; then
                  docker compose exec -T --user www-data app sh -c "NODE_OPTIONS='--max-old-space-size=3072' composer run post-install-cmd"
                else
                  docker compose exec -T --user www-data app sh -c "composer run post-install-cmd"
                fi
                # Reinstall database using the new repository
                docker compose exec -T --user www-data app sh -c "php bin/console ibexa:install --no-interaction"

            - if: inputs.multirepository && !contains(inputs.setup, 'elastic.yml') && !contains(inputs.setup, 'solr8.yml')
              name: Set up multirepository build with LSE
              run: |
                cd ${HOME}/build/project
                # Drop database used by default connection
                docker compose exec -T --user www-data app sh -c "php bin/console doctrine:database:drop --connection=default --force"
                # Clear SPI cache
                docker compose exec -T --user www-data app sh -c 'php bin/console cache:pool:clear ${CACHE_POOL:-cache.tagaware.filesystem}'
                # Run setup
                docker compose exec -T --user www-data app sh -c "vendor/bin/ibexabehat --mode=standard --profile=setup --suite=multirepository -c=behat_ibexa_oss.yaml --tags=@multirepository"
                if [[ "${{ steps.project-version.outputs.version }}" == *'5.0.x-dev'* ]]; then
                  docker compose exec -T --user www-data app sh -c "NODE_OPTIONS='--max-old-space-size=3072' composer run post-install-cmd"
                else
                  docker compose exec -T --user www-data app sh -c "composer run post-install-cmd"
                fi
                # Reinstall database using the new repository
                docker compose exec -T --user www-data app sh -c "php bin/console ibexa:install --no-interaction"

            - if: inputs.test-setup-phase-1 != ''
              name: Run first phase of tests setup
              run: |
                cd ${HOME}/build/project
                docker compose --env-file=.env exec -T --user www-data app sh -c "vendor/bin/ibexabehat ${{ inputs.test-setup-phase-1 }}"
                if [[ "${{ steps.project-version.outputs.version }}" == *'5.0.x-dev'* ]]; then
                  docker compose --env-file=.env exec -T --user www-data app sh -c "NODE_OPTIONS='--max-old-space-size=3072' composer run post-install-cmd"
                else
                  docker compose --env-file=.env exec -T --user www-data app sh -c "composer run post-install-cmd"
                fi

            - if: inputs.test-setup-phase-2 != ''
              name: Run second phase of tests setup
              run: |
                cd ${HOME}/build/project
                docker compose --env-file=.env exec -T --user www-data app sh -c "vendor/bin/ibexabehat ${{ inputs.test-setup-phase-2 }}"
                if [[ "${{ steps.project-version.outputs.version }}" == *'5.0.x-dev'* ]]; then
                  docker compose --env-file=.env exec -T --user www-data app sh -c "NODE_OPTIONS='--max-old-space-size=3072' composer run post-install-cmd"
                else
                  docker compose --env-file=.env exec -T --user www-data app sh -c "composer run post-install-cmd"
                fi

            - name: Run tests
              run: |
                  cd ${HOME}/build/project
                  docker compose --env-file=.env exec -T --user www-data app sh -c "vendor/bin/ibexabehat --group-count=${{ needs.setup-jobs.outputs.job-count }} --group-offset=${{ matrix.offset }} ${{ inputs.test-suite }} --process=1"

            - if: always() && github.event_name != 'pull_request'
              name: Create Slack message variables
              run: |
                echo "RESULT_EMOJI=:x:" >> $GITHUB_ENV
                JOB_NUMBER=$(expr ${{ matrix.offset }} + 1)
                echo "JOB_NUMBER=$JOB_NUMBER" >> $GITHUB_ENV

            - if: always() && job.status == 'success' && github.event_name != 'pull_request'
              name: Create Slack message success variables
              run: |
                echo "RESULT_EMOJI=:white_check_mark:" >> $GITHUB_ENV

            - if: always() && github.event_name != 'pull_request'
              name: Create Slack message
              run: >
                 echo "SLACK_PAYLOAD=
                 {\"blocks\": [{\"type\": \"section\",\"text\": {\"type\": \"mrkdwn\",\"text\": \"
                 $RESULT_EMOJI *$GITHUB_REPOSITORY*:*$GITHUB_REF_NAME* ($GITHUB_ACTOR) |
                 <$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Details> |
                 $JOB_NUMBER/${{ inputs.job-count }}
                 \"}}]}" >> $GITHUB_ENV

            - if: always() && github.event_name != 'pull_request' && (job.status != 'success' || inputs.send-success-notification)
              name: Send notification about workflow result
              uses: slackapi/slack-github-action@v1.23.0
              with:
                  payload: ${{ env.SLACK_PAYLOAD }}
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
